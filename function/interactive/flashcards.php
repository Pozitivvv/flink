<?php
session_start();
require_once '../../config.php';
if (!isset($_SESSION['user_id'])) { 
    header('Location: index.php'); 
    exit(); 
}
$user_id = $_SESSION['user_id'];

// –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
$words = [];
if (isset($_GET['day_id']) && !empty($_GET['day_id'])) {
    // –°–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
    $stmt = $pdo->prepare("SELECT id, article, german, translation FROM words WHERE user_id=? AND day_id=? ORDER BY RAND() LIMIT 20");
    $stmt->execute([$user_id, $_GET['day_id']]);
    $words = $stmt->fetchAll(PDO::FETCH_ASSOC);
} else {
    // 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤
    $stmt = $pdo->prepare("SELECT id, article, german, translation FROM words WHERE user_id=? ORDER BY RAND() LIMIT 20");
    $stmt->execute([$user_id]);
    $words = $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ - —Ä–µ–¥–∏—Ä–µ–∫—Ç
if (empty($words)) {
    header('Location: index.php');
    exit();
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<meta name="theme-color" content="#1a1a2e">
<title>–§–ª–µ—à–∫–∞—Ä—Ç—ã</title>
<link rel="stylesheet" href="style/flashcard.css?v=0.0.1">
</head>
<body>
<div class="container">
    <!-- –®–∞–ø–∫–∞ -->
    <div class="header">
        <a href="index.php" class="back-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M15 18l-6-6 6-6"/>
            </svg>
        </a>
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>
        <div class="counter">
            <span id="currentCard">1</span>/<span id="totalCards"><?= count($words) ?></span>
        </div>
    </div>

    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ -->
    <div class="card-container" id="cardContainer">
        <div class="swipe-indicator" id="swipeIndicator">‚Üë</div>
        
        <div class="card-wrapper" id="cardWrapper">
            <div class="card card-front">
                <button class="sound-btn" onclick="playCurrentWord(event)">üîä</button>
                <div class="card-article" id="frontArticle"></div>
                <div class="card-word" id="frontWord"></div>
                <div class="card-hint">–ö–ª–∏–∫ –∏–ª–∏ —Ç—è–Ω–∏—Ç–µ ‚Üê ‚Üí –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ ‚Ä¢ ‚Üë –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ</div>
            </div>
            <div class="card card-back">
                <button class="sound-btn sound-btn-back" onclick="playCurrentWord(event)">üîä</button>
                <div class="card-article" id="backArticle"></div>
                <div class="card-word" id="backWord"></div>
                <div class="card-translation" id="backTranslation"></div>
            </div>
        </div>
    </div>

    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
    <div class="navigation">
        <button class="nav-btn" id="prevBtn" onclick="prevCard()">
            ‚Üê –ù–∞–∑–∞–¥
        </button>
        <button class="nav-btn" id="nextBtn" onclick="nextCard()">
            –î–∞–ª–µ–µ ‚Üí
        </button>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è -->
<div class="completion-modal" id="completionModal">
    <div class="modal-content">
        <div class="modal-icon">üéâ</div>
        <h2 class="modal-title">Gute Arbeit</h2>
        <p class="modal-text">Sie haben alles gesehen <?= count($words) ?> Karten</p>
        <button class="modal-btn" onclick="window.location='index.php'">
            –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–µ–º
        </button>
    </div>
</div>
<script>
    const words = <?= json_encode($words) ?>;
    let currentIndex = 0;
    let isFlipped = false;
    

    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const cardWrapper = document.getElementById('cardWrapper');
    const cardContainer = document.getElementById('cardContainer');
    const progressFill = document.getElementById('progressFill');
    const currentCardEl = document.getElementById('currentCard');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const completionModal = document.getElementById('completionModal');
    const swipeIndicator = document.getElementById('swipeIndicator');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    const frontArticle = document.getElementById('frontArticle');
    const frontWord = document.getElementById('frontWord');
    const backArticle = document.getElementById('backArticle');
    const backWord = document.getElementById('backWord');
    const backTranslation = document.getElementById('backTranslation');

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–∞–π–ø–∞
    let startX = 0;
    let startY = 0;
    let currentX = 0;
    let currentY = 0;
    let isDragging = false;
    let swipeDirection = null;
    let isAnimating = false;
    let hasMoved = false;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    function loadCard() {
        const word = words[currentIndex];
        
        frontArticle.textContent = word.article || '';
        frontWord.textContent = word.german;
        backArticle.textContent = word.article || '';
        backWord.textContent = word.german;
        backTranslation.textContent = word.translation;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        currentCardEl.textContent = currentIndex + 1;
        const progress = ((currentIndex + 1) / words.length) * 100;
        progressFill.style.width = progress + '%';
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        prevBtn.disabled = currentIndex === 0;
        nextBtn.textContent = currentIndex === words.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ ‚úì' : '–î–∞–ª–µ–µ ‚Üí';
        
        // –°–±—Ä–æ—Å –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
        isFlipped = false;
        cardWrapper.classList.remove('flipped');
        cardWrapper.classList.add('swipe-in');
        setTimeout(() => cardWrapper.classList.remove('swipe-in'), 400);
    }

    // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    function flipCard() {
        isFlipped = !isFlipped;
        cardWrapper.classList.toggle('flipped');
    }

    // –ö–ª–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    cardContainer.addEventListener('click', (e) => {
        if (!hasMoved && !isDragging && !e.target.classList.contains('sound-btn') && !e.target.closest('.sound-btn')) {
            flipCard();
        }
    });

    // Touch —Å–æ–±—ã—Ç–∏—è
    cardContainer.addEventListener('touchstart', handleStart, { passive: false });
    cardContainer.addEventListener('touchmove', handleMove, { passive: false });
    cardContainer.addEventListener('touchend', handleEnd);

    // Mouse —Å–æ–±—ã—Ç–∏—è
    cardContainer.addEventListener('mousedown', handleStart);
    cardContainer.addEventListener('mousemove', handleMove);
    cardContainer.addEventListener('mouseup', handleEnd);
    cardContainer.addEventListener('mouseleave', handleEnd);

    function handleStart(e) {
        if (isAnimating) return;
        e.preventDefault();
        isDragging = true;
        hasMoved = false;
        swipeDirection = null;
        const touch = e.touches ? e.touches[0] : e;
        startX = touch.clientX;
        startY = touch.clientY;
        currentX = touch.clientX;
        currentY = touch.clientY;
        cardWrapper.style.transition = 'none';
        cardWrapper.classList.add('swiping');
    }

    function handleMove(e) {
        if (!isDragging) return;
        e.preventDefault();
        
        const touch = e.touches ? e.touches[0] : e;
        currentX = touch.clientX;
        currentY = touch.clientY;
        const deltaX = currentX - startX;
        const deltaY = currentY - startY;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
        if (!swipeDirection && (Math.abs(deltaX) > 5 || Math.abs(deltaY) > 5)) {
            swipeDirection = Math.abs(deltaY) > Math.abs(deltaX) ? 'vertical' : 'horizontal';
            hasMoved = true;
        }
        
        if (swipeDirection === 'vertical') {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø - —Å–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            const progress = deltaY / window.innerHeight;
            const opacity = 1 - Math.abs(progress) * 0.8;
            
            const rotateY = isFlipped ? 180 : 0;
            cardWrapper.style.transform = `translateY(${deltaY}px) rotateY(${rotateY}deg)`;
            cardWrapper.style.opacity = opacity;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if (deltaY < -50 && currentIndex < words.length - 1) {
                swipeIndicator.classList.add('visible');
            } else {
                swipeIndicator.classList.remove('visible');
            }
        } else if (swipeDirection === 'horizontal') {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø - –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
            const baseRotation = isFlipped ? 180 : 0;
            const sensitivity = 0.5;
            const rotation = baseRotation + (deltaX * sensitivity);
            cardWrapper.style.transform = `rotateY(${rotation}deg)`;
        }
    }

    function handleEnd(e) {
        if (!isDragging) return;
        isDragging = false;
        
        const deltaX = currentX - startX;
        const deltaY = currentY - startY;
        const horizontalThreshold = 100;
        const verticalThreshold = 80;
        
        swipeIndicator.classList.remove('visible');
        
        cardWrapper.style.transition = 'transform 0.5s ease-out, opacity 0.6s ease';
        cardWrapper.classList.remove('swiping');
        
        if (swipeDirection === 'vertical') {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø - —Å–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            if (deltaY < -verticalThreshold && currentIndex < words.length - 1) {
                swipeOutAndNext('up');
            } else {
                const rotateY = isFlipped ? 180 : 0;
                cardWrapper.style.transform = `rotateY(${rotateY}deg)`;
                cardWrapper.style.opacity = '1';
            }
        } else if (swipeDirection === 'horizontal') {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø - –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–æ—Ä–æ–Ω—É
            if (Math.abs(deltaX) > horizontalThreshold) {
                const currentRotation = isFlipped ? 180 : 0;
                const flipDirection = deltaX > 0 ? 1 : -1;
                const targetRotation = currentRotation + (180 * flipDirection);

                cardWrapper.style.transform = `rotateY(${targetRotation}deg)`;

                // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º rotation –∫ 0 –∏–ª–∏ 180
                setTimeout(() => {
                    isFlipped = !isFlipped;
                    cardWrapper.classList.toggle('flipped');
                    const normalizedRotation = isFlipped ? 180 : 0;
                    cardWrapper.style.transition = 'none';
                    cardWrapper.style.transform = `rotateY(${normalizedRotation}deg)`;
                    setTimeout(() => {
                        cardWrapper.style.transition = 'transform 0.5s ease-out, opacity 0.6s ease';
                    }, 10);
                }, 500); // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ transition
            } else {
                // –ú–∞–ª–µ–Ω—å–∫–∏–π —Å–≤–∞–π–ø - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                const rotateY = isFlipped ? 180 : 0;
                cardWrapper.style.transform = `rotateY(${rotateY}deg)`;
            }
        }
        
        startX = 0;
        currentX = 0;
        startY = 0;
        currentY = 0;
        swipeDirection = null;
    }

    function swipeOutAndNext(direction) {
        isAnimating = true;
        cardWrapper.classList.add(direction === 'up' ? 'swipe-out-up' : 'swipe-out-down');
        
        setTimeout(() => {
            cardWrapper.classList.remove('swipe-out-up', 'swipe-out-down');
            cardWrapper.style.transform = '';
            cardWrapper.style.opacity = '1';
            
            if (direction === 'up') {
                currentIndex++;
            }
            
            loadCard();
            isAnimating = false;
        }, 400);
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    function prevCard() {
        if (currentIndex > 0 && !isAnimating) {
            currentIndex--;
            loadCard();
        }
    }

    function nextCard() {
        if (!isAnimating) {
            if (currentIndex < words.length - 1) {
                swipeOutAndNext('up');
            } else {
                completionModal.classList.add('show');
            }
        }
    }

    // –û–∑–≤—É—á–∫–∞
    function playCurrentWord(e) {
        if (e) e.stopPropagation();
        const word = words[currentIndex];
        const fullWord = (word.article ? word.article + ' ' : '') + word.german;
        playWord(fullWord);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadCard();
</script>

<script src="../../script/voice.js"></script>
</body>
</html>